type Item = record {
    title: text;
    description: text;
};

type Bid = record {
    price: nat64;
    time: nat64;
    originator: principal;
};

type Auction = record {
    id: nat64;
    item: Item;
    bid_history: vec nat64;
    end_time: nat64;
    remaining_time: nat64;
    starting_price: opt nat64;
    originator: principal;
    contact: text;
    location: text;
    whitelist: bool;
    
    list_on_site: bool;
};

type DutchAuction = record {
    id: nat64;
    item: Item;
    bid_history: vec nat64;
    end_time: nat64;
    remaining_time: nat64;
    starting_price: opt nat64;
    originator: principal;
    contact: text;
    location: text;
    winner: opt principal;
    whitelist: bool;
    list_on_site: bool;
};

type SbAuction = record {
    id: nat64;
    item: Item;
    bid_history: vec nat64;
    end_time: nat64;
    remaining_time: nat64;
    starting_price: opt nat64;
    originator: principal;
    contact: text;
    location: text;
    winner: opt principal;
    whitelist: bool;
    list_on_site: bool;
};

type AuctionDetails = record {
    item: Item;
    bid_history: vec Bid;
    end_time: nat64;
    starting_price: opt nat64;
    originator: principal;
    contact: text;
    location: text;
};

type SbAuctionDetails = record {
    item: Item;
    bid_history: vec Bid;
    end_time: nat64;
    starting_price: opt nat64;
    originator: principal;
    contact: text;
    location: text;
    winner: opt principal;
};


type AuctionId = nat64;

type AuctionOverview = record {
    id: AuctionId;
    item: Item;
};

type ItemDetails = record {
    item: Item;
    image: vec nat8;
};

type Conversation = record {
    question: text;
    answer: text;
    is_private: bool;
    originator: principal;
};

type GetTransactionReceiptResult = variant {
  Ok : opt TransactionReceipt;
  Err : RpcError;
};

type SimplifiedReceipt = record {
    status: opt nat64;
    transaction_hash: text;
    block_number: opt nat64;
    from: text;
    to: opt text;
    contract_address: opt text;
    gas_used: nat64;
};




type HttpOutcallError = variant {
  IcError : record { code : RejectionCode; message : text };
  InvalidHttpJsonRpcResponse : record {
    status : nat16;
    body : text;
    parsingError : opt text;
  };
};
type ICRC1TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type ICRC2ApproveError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  AllowanceChanged : record { current_allowance : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  Expired : record { ledger_time : nat64 };
  InsufficientFunds : record { balance : nat };
};
type JsonRpcError = record { code : int64; message : text };
type LogEntry = record {
  transactionHash : opt text;
  blockNumber : opt nat;
  data : text;
  blockHash : opt text;
  transactionIndex : opt nat;
  topics : vec text;
  address : text;
  logIndex : opt nat;
  removed : bool;
};
type ProviderError = variant {
  TooFewCycles : record { expected : nat; received : nat };
  MissingRequiredProvider;
  ProviderNotFound;
  NoPermission;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : nat; Err : ICRC2ApproveError };
type Result_1 = variant { Ok : nat; Err : ICRC1TransferError };
type Result_2 = variant { Ok : RetrieveEthRequest; Err : WithdrawalError };
type RetrieveEthRequest = record { block_index : nat };
type RpcError = variant {
  JsonRpcError : JsonRpcError;
  ProviderError : ProviderError;
  ValidationError : ValidationError;
  HttpOutcallError : HttpOutcallError;
};
type TransactionReceipt = record {
  to : text;
  status : nat;
  transactionHash : text;
  blockNumber : nat;
  from : text;
  logs : vec LogEntry;
  blockHash : text;
  "type" : text;
  transactionIndex : nat;
  effectiveGasPrice : nat;
  logsBloom : text;
  contractAddress : opt text;
  gasUsed : nat;
};
type ValidationError = variant {
  CredentialPathNotAllowed;
  HostNotAllowed : text;
  CredentialHeaderNotAllowed;
  UrlParseError : text;
  Custom : text;
  InvalidHex : text;
};
type VerifiedTransactionDetails = record { from : text; amount : nat };
type WithdrawalError = variant {
  TemporarilyUnavailable : text;
  InsufficientAllowance : record { allowance : nat };
  AmountTooLow : record { min_withdrawal_amount : nat };
  InsufficientFunds : record { balance : nat };
};

type MultiGetBlockByNumberResult = record {
    number: nat64;
    timestamp: nat64;
    transactions: vec Transaction;
};

type MultiGetTransactionReceiptResult = variant {
  Inconsistent : vec record {
    provider : Provider;
    result : ProviderResult;
  };
};

type Provider = variant {
  EthSepolia : EthSepoliaProvider;
};

type EthSepoliaProvider = variant {
  BlockPi;
  PublicNode;
  Sepolia;
};

type ProviderResult = variant {
  Ok : opt TransactionReceipt;
  Err : ProviderError;
};

type Block = record {
  baseFeePerGas : nat;
  difficulty : nat;
  extraData : text;
  gasLimit : nat;
  gasUsed : nat;
  hash : text;
  logsBloom : text;
  miner : text;
  mixHash : text;
  nonce : nat;
  number : nat;
  parentHash : text;
  receiptsRoot : text;
  sha3Uncles : text;
  size : nat;
  stateRoot : text;
  timestamp : nat;
  totalDifficulty : nat;
  transactions : vec text;
  transactionsRoot : opt text;
  uncles : vec text;
};


type Transaction = record {
  hash : text;
  nonce : nat;
  block_hash : opt text;
  block_number : opt nat;
  transaction_index : opt nat;
  from : text;
  to : opt text;
  value : nat;
  gas_price : nat;
  gas : nat;
  input : text;
  v : nat;
  r : text;
  s : text;
};

type VerificationResult = record {
    amount: nat;
    from: text;
};

// TODO


// post and pre upgrade functions and new storage types(refcell) -> " 1 sesh"
// type reformatting for each auction type



service : {
    ///// English Auction /////

    //C
    new_auction: (item: Item, price: nat64, duration: nat64, contact: text, location: text, image: vec nat8, whitelist:bool, list_on_site:bool ) -> ();
    make_bid: (id: AuctionId, price: nat64) -> (result: variant { Ok: null; Err: text });
    schedule_new_auction: (item: Item, price: nat64, duration: nat64, contact: text, location: text, image: vec nat8, whitelist:bool, list_on_site:bool, time: nat64 ) -> ();
    new_auction_s: (item: Item, price: nat64, duration: nat64, contact: text, location: text, image: vec nat8, whitelist:bool, list_on_site:bool, id: nat64) -> ();
    
    
    //U
    end_auction: (nat64) -> (result: variant { Ok: null; Err: text });

    //R
    get_auction: (id: nat64) -> (opt Auction) query;
    get_auction_details: (id: AuctionId) -> (opt AuctionDetails) query; // remove
    get_active_auctions: () -> (vec AuctionOverview) query;
    get_ended_auctions: () -> (vec AuctionOverview) query;
    get_all_auctions: () -> (vec AuctionOverview) query;
    get_all_bids: (id: AuctionId) -> (vec Bid) query;
    get_highest_bidder: (id: AuctionId) -> (opt principal) query;
    get_highest_bid_details: (id: AuctionId) -> (opt Bid) query;
    get_remaining_time: (id: AuctionId) -> (opt nat64) query;
    get_qr_code: (string: text) -> (vec nat8);
    get_auction_originator: (id: AuctionId) -> (opt principal) query;
    get_all_auctions_by_originator: () -> (vec AuctionOverview) query;
    get_item_image: (id: AuctionId) -> ( vec nat8) query;

    get_scheduled_auction: (id: AuctionId) -> (opt Auction) query;
    get_all_scheduled_auctions: () -> (vec AuctionOverview) query;
    
    is_listed_eng: (id: AuctionId) -> (bool) query;




    ///// Dutch Auction /////

    //C
    new_dutch_auction: (item: Item, price: nat64, duration: nat64, contact: text, location: text, image: vec nat8,whitelist:bool, list_on_site:bool) -> ();
    accept_price: (id: AuctionId) -> (result: variant { Ok: null; Err: text });
    schedule_new_dutch_auction: (item: Item, price: nat64, duration: nat64, contact: text, location: text, image: vec nat8, whitelist:bool, list_on_site:bool, time: nat64 ) -> ();
    new_dutch_auction_s: (item: Item, price: nat64, duration: nat64, contact: text, location: text, image: vec nat8, whitelist:bool, list_on_site:bool, id: nat64) -> ();
    
    //U
    lower_price: (id: AuctionId, price: nat64) -> (result: variant { Ok: null; Err: text });
    end_dutch_auction: (id: AuctionId) -> (result: variant { Ok: null; Err: text });

    //R
    get_dutch_auction_details: (id: AuctionId) -> (opt AuctionDetails) query;
    get_active_dutch_auctions: () -> (vec AuctionOverview) query;
    get_dutch_auction: (id: AuctionId) -> (opt DutchAuction) query;
    get_all_bids_by_dutch_auction_id: (id: AuctionId) -> (vec Bid) query;
    get_ended_dutch_auctions: () -> (vec AuctionOverview) query;
    get_dutch_overview_list: () -> (vec AuctionOverview) query;
    get_dutch_auction_originator: (id: AuctionId) -> (opt principal) query;
    get_all_dutch_auctions_by_originator: () -> (vec AuctionOverview) query;
    get_remaining_time_dutch: (id: AuctionId) -> (opt nat64) query;
    get_all_dutch_bids_by_auction_id: (id: AuctionId) -> (vec Bid) query;
    get_dutch_winner_by_auction_id: (id: AuctionId) -> (opt principal) query;

    get_scheduled_dutch_auction: (id: AuctionId) -> (opt DutchAuction) query;
    get_all_scheduled_dutch_auctions: () -> (vec AuctionOverview) query;

    is_listed_dutch: (id: AuctionId) -> (bool) query;





    ///// Sealed Bid Auction /////

    //C
    new_sb_auction: (item: Item, price: nat64, duration: nat64, contact: text, location: text, image: vec nat8,whitelist:bool, list_on_site:bool) -> ();
    make_bid_sb: (id: AuctionId, price: nat64) -> (result: variant { Ok: null; Err: text });
    schedule_new_sb_auction: (item: Item, price: nat64, duration: nat64, contact: text, location: text, image: vec nat8, whitelist:bool, time: nat64 ) -> ();
    new_sb_auction_s: (item: Item, price: nat64, duration: nat64, contact: text, location: text, image: vec nat8, whitelist:bool, id: nat64) -> ();

    //U
    end_sb_auction: (nat64) -> (result: variant { Ok: null; Err: text });
    quick_end_auction: (id: AuctionId) -> ();  //for testing purposes

    //R
    get_sb_auction: (id: nat64) -> (opt SbAuction) query;
    get_sb_auction_details: (id: AuctionId) -> (opt SbAuctionDetails) query;
    get_sb_auction_originator: (id: AuctionId) -> (opt principal) query;
    get_all_sb_auctions_by_originator: () -> (vec AuctionOverview) query;
    get_active_sb_auctions: () -> (vec AuctionOverview) query;
    get_all_bid_values_by_sb_auction_id: (id: AuctionId) -> (vec nat64) query;
    get_all_sb_bids_by_auction_id: (id: AuctionId) -> (vec Bid) query;
    get_sb_winner_by_auction_id: (id: AuctionId) -> (opt principal) query;
    get_remaining_time_sb: (id: AuctionId) -> (opt nat64) query;
    get_sb_overview_list: () -> (vec AuctionOverview) query;
    // get_active_auctions: () -> (vec AuctionOverview) query;

    get_scheduled_sb_auction: (id: AuctionId) -> (opt SbAuction) query;
    get_all_scheduled_sb_auctions: () -> (vec AuctionOverview) query;

    is_listed_sb: (id: AuctionId) -> (bool) query;





    ///// Q&A SECTION /////
    ask_question: (id: AuctionId, question: text) -> ();
    answer_question: (id: AuctionId, answer: text) -> ();
    answer_question_private: (id: AuctionId, answer: text) -> ();
    delete_question: (id: AuctionId) -> ();
    get_questions: (id: AuctionId) -> (vec Conversation) query;
    get_question: (id: AuctionId) -> (opt Conversation) query;
    get_question_ids_by_auction_id: (id: AuctionId) -> (vec AuctionId) query;
    get_questions_by_ids: (ids: vec AuctionId) -> (vec Conversation) query;


    ///// Whitelist /////
    add_to_whitelist:(id: AuctionId, user: principal) -> ();
    remove_from_whitelist:(id: AuctionId, user: principal) -> ();
    get_whitelist:(id: AuctionId) -> (vec principal) query;
    is_whitelisted:(id: AuctionId, user: principal) -> (bool) query;


    ///// Randoms and Codes /////
    random_number: () -> (nat64);
    assign_buy_code: (id: AuctionId) -> ();
    get_buy_code: (id: AuctionId) -> (nat64) query;

    
    ///// Usernames /////
    set_username: (username: text) -> ();
    get_username: () -> ( text) query;
    get_username_by_principal: (principal) -> ( text) query;
    get_principal_by_username: (username: text) -> ( principal) query;
    get_all_usernames: () -> (vec text) query;
    
    
    who_am_i: () -> (principal) query;

    /////////////////////////////////////////
    deposit_principal: (princip: text) -> (text) query;
    // get_receipt: (hash: text) -> (GetTransactionReceiptResult);
    
    canister_deposit_principal: () -> (text) query;
    get_latest_sepolia_block : () -> (variant { Ok : Block; Err : text });
    get_latest_ethereum_block : () -> (Block);
    // get_tx_receipt : (hash : text) -> (GetTransactionReceiptResult);
    get_tx_receipt :  (hash : text) -> (variant { Ok : opt TransactionReceipt; Err : text });
    get_receipt : (hash : text) -> (GetTransactionReceiptResult);
    get_transaction_receipt : (hash : text) -> (text);
    // returns amount and sender , nat and text
    verify_transaction: (hash: text) -> (VerificationResult);
    
    
    
    
    
    // get_balance : (opt text) -> (Result);
    // eth_get_tx_receipt : (hash : text) -> (variant { Ok : opt GetTransactionReceiptResult; Err : text });
};


//EVM-RPC GET RECEIPT CALL FROM DFX
//////   dfx canister call evm_rpc eth_getTransactionReceipt '(variant {EthSepolia}, null, "0x0dab5ef451bf8072b51f4f398d5a55650483007ce060cf98273922bdaca48a82")' --wallet $(dfx identity get-wallet) --with-cycles 1000000000